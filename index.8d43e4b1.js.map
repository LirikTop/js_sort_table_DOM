{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAW,EAAM,IAAI,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAE3B,SAAS,EAAS,CAAG,EACnB,IAAM,EAAM,WAAW,EAAI,OAAO,CAAC,QAAS,KAE5C,OAAO,MAAM,GAAO,EAAI,IAAI,GAAG,WAAW,GAAK,CACjD,CAGA,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EACE,IAAM,EAAQ,EAAM,MAAM,CAAC,OAAO,CAAC,MAEnC,GAAI,EAAO,CAIT,IAAK,IAHC,EAAQ,EAAM,SAAS,CACvB,EAAW,EAAE,CAEV,EAAI,EAAG,EAAI,EAAK,MAAM,CAAG,EAAG,IAAK,CAExC,IAAM,EAAO,AADD,CAAI,CAAC,EAAE,CACF,KAAK,CAAC,EAAM,CAE7B,EAAS,IAAI,CAAC,EAAK,SAAS,CAAC,CAAA,GAC/B,CAEA,EAAS,IAAI,CAAC,SAAC,CAAA,CAAG,CAAlB,EACE,IAAM,EAAQ,EAAE,WAAW,CAAC,IAAI,GAC1B,EAAQ,EAAE,WAAW,CAAC,IAAI,UAEhC,AAAI,AAAC,MAAM,EAAS,KAAY,MAAM,EAAS,IAIxC,EAAM,aAAa,CAAC,GAHlB,EAAS,GAAS,EAAS,EAItC,GAEA,EAAS,OAAO,CAAC,SAAC,CAAA,CAAU,CAA5B,EACE,CAAI,CAAC,EAAI,EAAE,CAAC,KAAK,CAAC,EAAM,CAAC,WAAW,CAAC,EACvC,EACF,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar rows = _to_consumable_array(table.rows);\nfunction toNumber(str) {\n    var num = parseFloat(str.replace(/[$,]/g, \"\"));\n    return isNaN(num) ? str.trim().toLowerCase() : num;\n}\n// eslint-disable-next-line no-shadow\ntable.addEventListener(\"click\", function(event) {\n    var thead = event.target.closest(\"th\");\n    if (thead) {\n        var index = thead.cellIndex;\n        var newCells = [];\n        for(var i = 1; i < rows.length - 1; i++){\n            var row = rows[i];\n            var cell = row.cells[index];\n            newCells.push(cell.cloneNode(true));\n        }\n        newCells.sort(function(a, b) {\n            var cellA = a.textContent.trim();\n            var cellB = b.textContent.trim();\n            if (!isNaN(toNumber(cellA)) && !isNaN(toNumber(cellB))) return toNumber(cellA) - toNumber(cellB);\n            return cellA.localeCompare(cellB);\n        });\n        newCells.forEach(function(sortCell, i) {\n            rows[i + 1].cells[index].replaceWith(sortCell);\n        });\n    }\n});\n\n//# sourceMappingURL=index.8d43e4b1.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst rows = [...table.rows];\n\nfunction toNumber(str) {\n  const num = parseFloat(str.replace(/[$,]/g, ''));\n\n  return isNaN(num) ? str.trim().toLowerCase() : num;\n}\n\n// eslint-disable-next-line no-shadow\ntable.addEventListener('click', (event) => {\n  const thead = event.target.closest('th');\n\n  if (thead) {\n    const index = thead.cellIndex;\n    const newCells = [];\n\n    for (let i = 1; i < rows.length - 1; i++) {\n      const row = rows[i];\n      const cell = row.cells[index];\n\n      newCells.push(cell.cloneNode(true));\n    }\n\n    newCells.sort((a, b) => {\n      const cellA = a.textContent.trim();\n      const cellB = b.textContent.trim();\n\n      if (!isNaN(toNumber(cellA)) && !isNaN(toNumber(cellB))) {\n        return toNumber(cellA) - toNumber(cellB);\n      }\n\n      return cellA.localeCompare(cellB);\n    });\n\n    newCells.forEach((sortCell, i) => {\n      rows[i + 1].cells[index].replaceWith(sortCell);\n    });\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","table","document","querySelector","rows","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","toNumber","str","num","parseFloat","replace","isNaN","trim","toLowerCase","addEventListener","event","thead","target","closest","index","cellIndex","newCells","cell","row","cells","push","cloneNode","sort","a","b","cellA","textContent","cellB","localeCompare","forEach","sortCell","replaceWith"],"version":3,"file":"index.8d43e4b1.js.map"}